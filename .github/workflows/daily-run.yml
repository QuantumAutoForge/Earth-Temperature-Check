name: Daily Temperature Collection & Tweet

on:
  schedule:
    - cron: '30 12 */2 * *'  # Runs every 2 days at 12:30 PM UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  collect-data:
    runs-on: ubuntu-latest
    # NOTE: The maximum timeout for jobs running on GitHub-hosted runners on the free tier is 6 hours (360 minutes).
    timeout-minutes: 360
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Pull latest changes, collect data, and push
        env:
          VISUALCROSSINGAPI: ${{ secrets.VISUALCROSSINGAPI }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Pull the latest changes from the repository
          git pull origin main --rebase

          # Run the data collection script
          python dataupdation.py

          # Check for changes, and commit and push if any exist
          if ! git diff --quiet "*.json"; then
            git add "*.json"
            git commit -m "Update weather data [GitHub Actions]"
            git push origin main
          else
            echo "No changes to commit"
          fi

  tweet-temperature:
    runs-on: ubuntu-latest
    needs: collect-data
    # NOTE: The maximum timeout for jobs running on GitHub-hosted runners on the free tier is 6 hours (360 minutes).
    timeout-minutes: 360
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Tweet Temperature
        env:
          BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          CONSUMER_SECRET: ${{ secrets.CONSUMER_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        run: python tweeting.py
